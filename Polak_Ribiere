# Conjugate gradient to non quadratic functions (Polak RiriÃ¨re)

from numpy.linalg import multi_dot
import time

def Polak_Ribiere(x, A, eps = 10**(-9), max_iter = 1000, max_time = 120):
    dim = len(A)
    flag = "unknow"
    start = time.clock()
    k = 0
    g = fgrad(x).reshape(dim,1)
    d = - g
    elapsed = 0
    while (np.linalg.norm(g) > eps) and (k <= max_iter) and (elapsed <= max_time):
        alpha = armijo(x)
        x = x + alpha*d
        gn = fgrad(x)        
        if ((k+1) % dim == 0):
            beta = 0
        else:
            beta = np.asscalar(multi_dot([gn.reshape(1,dim),gn-g])/multi_dot([g.reshape(1,dim), g]))      
        g = gn
        d = - g + beta*d
        end = time.clock()
        elapsed = end - start
        k = k + 1
    if (np.linalg.norm(fgrad(x)) < eps):
        flag = "stationary point"
    elif (k > max_iter):
        flag = "reached max_iter"
    elif (elapsed > max_time):
        flag = "reached max_time"
    
    return flag, k, x, fval(x), elapsed
